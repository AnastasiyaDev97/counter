{"version":3,"sources":["FormWithSettings/FormWithSettings.module.css","DisplayWithSettings/DisplayWithSettings.module.css","Display/Display.module.css","Button/Button.module.css","App.module.css","Display/Display.tsx","Button/Button.tsx","Counter/Counter.tsx","DisplayWithSettings/DisplayWithSettings.tsx","FormWithSettings/FormWithSettings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Display","props","className","s","display","message","maxValue","count","Button","status","buttonActive","buttonNot","onClick","callback","title","Counter","buttons","filter","m","name","counterWrapper","map","id","DisplayWithSettings","inputs","container","value","inputErr","input","type","onChange","e","changeSettingsValue","Number","currentTarget","FormWithSettings","btnSet","find","f","startValue","App","useState","setCount","setStartValue","setMaxValue","setMessage","isSetActive","setIsSetActive","isResetActive","setIsResetActive","isIncActive","setIsIncActive","ButtonsData","v1","onSetHandler","onIncHandler","onResetHandler","setToLocalStorage","useEffect","getFromLocalStorage","key","localStorage","setItem","JSON","stringify","setValue","ValueFromLocStAsString","getItem","parse","changeSettingsMaxValue","changeSettingsStartValue","bgr","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.56141766.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"FormWithSettings_counterWrapper__1PRMw\",\"buttons\":\"FormWithSettings_buttons__37Srj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"DisplayWithSettings_display__H08ru\",\"container\":\"DisplayWithSettings_container__1OdGD\",\"input\":\"DisplayWithSettings_input__E3bTQ\",\"inputErr\":\"DisplayWithSettings_inputErr__3W0iL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__30Zg-\",\"maxValue\":\"Display_maxValue__2221t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonActive\":\"Button_buttonActive__3vX_t\",\"buttonNot\":\"Button_buttonNot__2c7Dj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgr\":\"App_bgr__2H5Le\"};","import s from \"./Display.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type DisplayPropsType = {\r\n    count: number | undefined | string\r\n    maxValue: number\r\n    message: string\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n\r\n    return (\r\n        <div className={`${s.display} ${props.message === 'error' ? s.maxValue : ''}`}>\r\n            {props.message === 'error' ? 'Incorrect value!'\r\n                : props.message === 'changes' ? 'enter values and press \\'set\\''\r\n                    : props.count}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Button.module.css'\r\nexport type ButtonPropsType = {\r\n    title: string\r\n    callback: () => void\r\n    status:boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    return (\r\n        <button className={props.status?s.buttonActive:s.buttonNot} onClick={props.callback}>{props.title}</button>\r\n    )\r\n}","import s from '../FormWithSettings/FormWithSettings.module.css'\r\nimport {Display} from \"../Display/Display\";\r\nimport {Button} from \"../Button/Button\";\r\nimport React from \"react\";\r\nimport {ButtonDataType} from \"../App\";\r\n\r\n\r\nexport type CounterPropsType = {\r\n    buttons: ButtonDataType\r\n    count?: number | undefined | string\r\n    maxValue: number\r\n    message: string\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n    let buttons = props.buttons.filter(m => m.name !== 'set')\r\n    return (\r\n        <div className={s.counterWrapper}>\r\n            <Display count={props.count} maxValue={props.maxValue} message={props.message}/>\r\n            <div className={s.buttons}>\r\n                {buttons.map(m => <Button key={m.id} title={m.name} callback={m.callback} status={m.status}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from \"./DisplayWithSettings.module.css\";\r\nimport {InputsType} from \"../App\";\r\nimport React, {ChangeEvent} from \"react\";\r\n\r\nexport type DisplayWithSettingsPropsType = {\r\n    inputs: InputsType\r\n    count: number | string\r\n    maxValue: number\r\n    startValue: number\r\n    message: string\r\n}\r\n\r\nexport const DisplayWithSettings = (props: DisplayWithSettingsPropsType) => {\r\n\r\n    return (\r\n        <div className={s.display}>\r\n            {props.inputs.map(m => {\r\n                const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    m.changeSettingsValue(Number(e.currentTarget.value))\r\n                }\r\n                return (\r\n                    <div className={s.container}><span>{m.name}</span>\r\n                        <input  value={m.value} className={props.message==='error' ? s.inputErr : s.input} type={'number'}\r\n                               onChange={onChangeHandler}/>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import s from \"./FormWithSettings.module.css\"\r\n\r\nimport {Button} from \"../Button/Button\";\r\nimport React from \"react\";\r\nimport {ButtonDataType, InputsType} from \"../App\";\r\nimport {DisplayWithSettings} from \"../DisplayWithSettings/DisplayWithSettings\";\r\n\r\nexport type FormWithSettingsPropsType = {\r\n    buttons: ButtonDataType\r\n    inputs: InputsType\r\n    count: number | string\r\n    maxValue: number\r\n    startValue: number\r\n    message:string\r\n}\r\n\r\n\r\nexport const FormWithSettings = (props: FormWithSettingsPropsType) => {\r\nlet btnSet=props.buttons.find(f=>f.name==='set')\r\n    return (\r\n        <div className={s.counterWrapper}>\r\n            <DisplayWithSettings inputs={props.inputs} count={props.count}\r\n                                 startValue={props.startValue}\r\n                                 maxValue={props.maxValue}\r\n                                 message={props.message}/>\r\n            <div className={s.buttons}>\r\n                {btnSet&&<Button title={btnSet.name} callback={btnSet.callback} status={btnSet.status}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport s from './App.module.css'\r\nimport {Counter} from \"./Counter/Counter\";\r\nimport {FormWithSettings} from './FormWithSettings/FormWithSettings';\r\nimport {v1} from \"uuid\";\r\n\r\nexport type buttonType = {\r\n    id: string\r\n    name: string\r\n    callback: () => void\r\n    status: boolean\r\n\r\n}\r\nexport type inputType = {\r\n    id: string\r\n    name: string\r\n    value: number\r\n    changeSettingsValue: (value: number) => void\r\n}\r\nexport type InputsType = Array<inputType>\r\nexport type ButtonDataType = Array<buttonType>\r\n\r\nexport function App() {\r\n\r\n    let [count, setCount] = useState<number>(0)\r\n    let [startValue, setStartValue] = useState<number>(0)\r\n    let [maxValue, setMaxValue] = useState<number>(5)\r\n    let [message, setMessage] = useState('')\r\n    let [isSetActive, setIsSetActive] = useState(true)\r\n    let [isResetActive, setIsResetActive] = useState(!isSetActive && true)\r\n    let [isIncActive, setIsIncActive] = useState(!isSetActive && true)\r\n\r\n    let ButtonsData = [\r\n        {\r\n            id: v1(), name: 'set', callback: () => {\r\n                onSetHandler()\r\n            }, status: isSetActive\r\n        },\r\n        {\r\n            id: v1(), name: 'inc', callback: () => {\r\n                onIncHandler()\r\n            }, status: isIncActive\r\n        },\r\n        {\r\n            id: v1(), name: 'reset', callback: () => {\r\n                onResetHandler()\r\n            }, status: isResetActive\r\n        }\r\n    ]\r\n\r\n\r\n    const onIncHandler = () => {\r\n        setIsResetActive(true)\r\n        if (count < maxValue) {\r\n            count++\r\n            setCount(count)\r\n        }\r\n        if (count === maxValue) {\r\n            setIsIncActive(false)\r\n        }\r\n    }\r\n\r\n    const onResetHandler = () => {\r\n        setIsResetActive(false)\r\n        setCount(startValue)\r\n        setIsIncActive(true)\r\n\r\n    }\r\n\r\n    const onSetHandler = () => {\r\n        setCount(startValue)\r\n        setMessage('')\r\n        setIsSetActive(false)\r\n        setIsIncActive(true)\r\n        setToLocalStorage('maxValue', maxValue)\r\n        setToLocalStorage('startValue', startValue)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getFromLocalStorage('maxValue', setMaxValue)\r\n        getFromLocalStorage('startValue', setStartValue)\r\n    }, [])\r\n\r\n    const setToLocalStorage = (key: string, value: number) => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }\r\n\r\n    const getFromLocalStorage = (key: string, setValue: (value: number) => void) => {\r\n        let ValueFromLocStAsString = localStorage.getItem(key)\r\n        if (ValueFromLocStAsString) {\r\n            setValue(JSON.parse(ValueFromLocStAsString))\r\n            if (key === 'startValue') {\r\n                setCount(JSON.parse(ValueFromLocStAsString))\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (startValue >= maxValue || startValue < 0 || maxValue < 0 || maxValue <= startValue) {\r\n            setMessage('error')\r\n            setIsSetActive(false)\r\n        } else {\r\n            setIsSetActive(true)\r\n        }\r\n    }, [startValue, maxValue])\r\n\r\n\r\n    const changeSettingsMaxValue = (value: number) => {\r\n        setMaxValue(value)\r\n        setMessage('changes')\r\n    }\r\n    const changeSettingsStartValue = (value: number) => {\r\n        setStartValue(value)\r\n        setMessage('changes')\r\n    }\r\n\r\n    let inputs = [{\r\n        id: v1(), name: 'max value:', value: maxValue, changeSettingsValue: (value: number) => {\r\n            changeSettingsMaxValue(value)\r\n        }\r\n    },\r\n        {\r\n            id: v1(), name: 'start value:', value: startValue, changeSettingsValue: (value: number) => {\r\n                changeSettingsStartValue(value)\r\n            }\r\n        },\r\n    ]\r\n    return (\r\n        <div className={s.bgr}>\r\n            <FormWithSettings buttons={ButtonsData} inputs={inputs} count={count} message={message}\r\n                              maxValue={maxValue}\r\n                              startValue={startValue}/>\r\n            <Counter buttons={ButtonsData} count={count} maxValue={maxValue} message={message}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { App } from './App'\r\nimport './index.css'\r\n\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}