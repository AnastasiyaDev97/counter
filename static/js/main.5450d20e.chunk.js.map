{"version":3,"sources":["App.module.css","Display/Display.tsx","Button/Button.tsx","Counter/Counter.tsx","DisplayWithSettings/DisplayWithSettings.tsx","FormWithSettings/FormWithSettings.tsx","bll/reducers/counter-reducer.ts","App.tsx","serviceWorker.ts","bll/store.ts","utils/local-storage utils.ts","index.tsx","FormWithSettings/FormWithSettings.module.css","DisplayWithSettings/DisplayWithSettings.module.css","Display/Display.module.css","Button/Button.module.css"],"names":["module","exports","Display","props","console","log","className","s","display","message","maxValue","count","Button","React","memo","disabled","status","buttonActive","buttonNot","onClick","callback","title","Counter","counterWrapper","buttons","onIncHandler","statusInc","onResetHandler","statusReset","DisplayWithSettings","inputs","map","m","container","name","value","inputErr","input","type","onChange","e","changeSettingsValue","Number","currentTarget","FormWithSettings","onSetHandler","initialState","isSetActive","isIncActive","isResetActive","startValue","toggleSetStatus","toggleIncStatus","toggleResetStatus","updateCountValue","updateMessageText","text","App","useSelector","state","counter","dispatch","useDispatch","useCallback","useEffect","id","v1","updateMaxValue","changeSettingsMaxValue","updateStartValue","changeSettingsStartValue","bgr","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5450d20e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgr\":\"App_bgr__2H5Le\"};","import s from \"./Display.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type DisplayPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    message: string\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n    console.log()\r\n    return (\r\n        <div\r\n            className={`${s.display} ${props.message === 'error' ? s.maxValue : ''} ${props.count === props.maxValue && s.maxValue}`}>\r\n            {props.message === 'error' ? 'Incorrect value!'\r\n                : props.message === 'changes' ? 'enter values and press \\'set\\''\r\n                    : props.count}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Button.module.css'\r\n\r\nexport type ButtonPropsType = {\r\n    title: string\r\n    callback: () => void\r\n    status: boolean\r\n}\r\n\r\nexport const Button = React.memo((props: ButtonPropsType) => {\r\n    console.log('btn')\r\n    return (\r\n        <button disabled={!props.status} className={props.status ? s.buttonActive : s.buttonNot} onClick={props.callback}>{props.title}</button>\r\n    )\r\n})","import s from '../FormWithSettings/FormWithSettings.module.css'\r\nimport {Display} from \"../Display/Display\";\r\nimport {Button} from \"../Button/Button\";\r\nimport React from \"react\";\r\n\r\n\r\nexport type CounterPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    message: string\r\n    statusInc: boolean\r\n    statusReset: boolean\r\n    onResetHandler: () => void\r\n    onIncHandler: () => void\r\n}\r\n\r\nexport const Counter = React.memo((props: CounterPropsType) => {\r\n    console.log('counter')\r\n    return (\r\n        <div className={s.counterWrapper}>\r\n            <Display count={props.count} maxValue={props.maxValue} message={props.message}/>\r\n            <div className={s.buttons}>\r\n                <Button title={'inc'} callback={props.onIncHandler} status={props.statusInc}/>\r\n                <Button title={'reset'} callback={props.onResetHandler} status={props.statusReset}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import s from \"./DisplayWithSettings.module.css\";\r\nimport {InputsType} from \"../App\";\r\nimport React, {ChangeEvent} from \"react\";\r\n\r\nexport type DisplayWithSettingsPropsType = {\r\n    inputs: InputsType\r\n    message: string\r\n}\r\n\r\nexport const DisplayWithSettings = React.memo((props: DisplayWithSettingsPropsType) => {\r\n    console.log('displ with setting')\r\n    return (\r\n        <div className={s.display}>\r\n            {props.inputs.map(m => {\r\n                const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    m.changeSettingsValue(Number(e.currentTarget.value))\r\n                }\r\n                return (\r\n                    <div className={s.container}><span>{m.name}</span>\r\n                        <input  value={m.value} className={props.message==='error' ? s.inputErr : s.input} type={'number'}\r\n                               onChange={onChangeHandler}/>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n})","import s from \"./FormWithSettings.module.css\"\r\n\r\nimport {Button} from \"../Button/Button\";\r\nimport React from \"react\";\r\nimport {InputsType} from \"../App\";\r\nimport {DisplayWithSettings} from \"../DisplayWithSettings/DisplayWithSettings\";\r\n\r\nexport type FormWithSettingsPropsType = {\r\n    inputs: InputsType\r\n    message: string\r\n    onSetHandler: () => void\r\n    status: boolean\r\n}\r\n\r\n\r\nexport const FormWithSettings =\r\n    React.memo((props: FormWithSettingsPropsType) => {\r\n    console.log('form with sett')\r\n    return (\r\n        <div className={s.counterWrapper}>\r\n            <DisplayWithSettings inputs={props.inputs}\r\n                                 message={props.message}/>\r\n            <div className={s.buttons}>\r\n                <Button title={'set'} callback={props.onSetHandler} status={props.status}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})","let initialState = {\r\n    count: 0,\r\n    message: '',\r\n    isSetActive: true,\r\n    isIncActive: false,\r\n    isResetActive: false,\r\n    startValue: 0,\r\n    maxValue: 6,\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport type generalActionType = incValueAT | toggleSetStatusAT | toggleIncStatusAT | toggleResetStatusAT\r\n    | updateCountValueAT | updateMessageTextAT|updateMaxValueAT | updateStartValueAT |setStartValueFromLSAT\r\n\r\ntype incValueAT = ReturnType<typeof incValue>\r\ntype toggleSetStatusAT = ReturnType<typeof toggleSetStatus>\r\ntype toggleIncStatusAT = ReturnType<typeof toggleIncStatus>\r\ntype toggleResetStatusAT = ReturnType<typeof toggleResetStatus>\r\ntype updateCountValueAT = ReturnType<typeof updateCountValue>\r\ntype updateMessageTextAT = ReturnType<typeof updateMessageText>\r\ntype updateMaxValueAT = ReturnType<typeof updateMaxValue>\r\ntype updateStartValueAT = ReturnType<typeof updateStartValue>\r\ntype setStartValueFromLSAT = ReturnType<typeof setStartValueFromLS>\r\n\r\n\r\n\r\nexport const incValue = () => ({type: 'INC-VALUE'} as const)\r\nexport const toggleSetStatus = (status: boolean) => {\r\n    return {\r\n        type: 'TOGGLE-SET-STATUS' as const,\r\n        status\r\n    }\r\n}\r\nexport const toggleIncStatus = (status: boolean) => {\r\n    return {\r\n        type: 'TOGGLE-INC-STATUS' as const,\r\n        status\r\n    }\r\n}\r\nexport const toggleResetStatus = (status: boolean) => ({\r\n    type: 'TOGGLE-RESET-STATUS',\r\n    status\r\n}) as const\r\nexport const updateCountValue = (value: number) => ({\r\n    type: 'UPDATE-COUNTER-VAL',\r\n    value,\r\n}) as const\r\nexport const updateMessageText = (text: string) => ({\r\n    type: 'UPDATE-MESS-TEXT',\r\n    text,\r\n}) as const\r\nexport const updateMaxValue = (value: number) => ({\r\n    type: 'UPDATE-MAX-VAL',\r\n    value,\r\n}) as const\r\nexport const updateStartValue = (value: number) => ({\r\n    type: 'UPDATE-START-VAL',\r\n    value,\r\n}) as const\r\n\r\nexport const setStartValueFromLS = (value: number) => ({\r\n    type: 'SET-START-VAL',\r\n    value,\r\n}) as const\r\n\r\nexport const counterReducer = (state: initialStateType=initialState, action: generalActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"INC-VALUE\":\r\n            return {...state, count: state.count + 1};\r\n        case 'TOGGLE-SET-STATUS':\r\n            return {...state, isSetActive: action.status}\r\n        case 'TOGGLE-INC-STATUS':\r\n            return {...state, isIncActive: action.status}\r\n        case 'TOGGLE-RESET-STATUS':\r\n            return {...state, isResetActive: action.status}\r\n        case \"UPDATE-COUNTER-VAL\":\r\n            return {...state, count: action.value}\r\n        case \"UPDATE-MESS-TEXT\":\r\n            return {...state, message: action.text}\r\n        case \"UPDATE-MAX-VAL\":\r\n            return {...state, maxValue: action.value}\r\n        case \"UPDATE-START-VAL\":\r\n            return {...state, startValue: action.value}\r\n        case \"SET-START-VAL\":\r\n            return {...state,startValue: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport s from './App.module.css'\r\nimport {Counter} from \"./Counter/Counter\";\r\nimport {FormWithSettings} from './FormWithSettings/FormWithSettings';\r\nimport {v1} from \"uuid\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./bll/store\";\r\nimport {\r\n    incValue, toggleIncStatus, toggleResetStatus, toggleSetStatus,\r\n    updateCountValue, updateMaxValue,\r\n    updateMessageText, updateStartValue,\r\n} from \"./bll/reducers/counter-reducer\";\r\n\r\nexport type inputType = {\r\n    id: string\r\n    name: string\r\n    value: number\r\n    changeSettingsValue: (value: number) => void\r\n}\r\nexport type InputsType = Array<inputType>\r\n\r\n\r\nexport function App() {\r\n    console.log('app')\r\n    let count = useSelector<AppStateType, number>(state => state.counter.count)\r\n    let startValue = useSelector<AppStateType, number>(state => state.counter.startValue)\r\n    let maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n    let message = useSelector<AppStateType, string>(state => state.counter.message)\r\n    let isSetActive = useSelector<AppStateType, boolean>(state => state.counter.isSetActive)\r\n    let isResetActive = useSelector<AppStateType, boolean>(state => state.counter.isResetActive)\r\n    let isIncActive = useSelector<AppStateType, boolean>(state => state.counter.isIncActive)\r\n    let dispatch = useDispatch()\r\n\r\n    if (count === maxValue) {\r\n        dispatch(toggleIncStatus(false))\r\n    }\r\n\r\n\r\n    const onIncHandler = useCallback(function () {\r\n        dispatch(toggleResetStatus(true))\r\n        dispatch(toggleSetStatus(false))\r\n        if (count < maxValue) {\r\n            dispatch(incValue())\r\n        }\r\n    },[dispatch])\r\n\r\n    const onResetHandler = useCallback( () => {\r\n        dispatch(toggleResetStatus(false))\r\n        dispatch(updateCountValue(startValue))\r\n        dispatch(toggleIncStatus(true))\r\n    },[dispatch,startValue])\r\n\r\n    const onSetHandler = useCallback( () => {\r\n        dispatch(updateCountValue(startValue))\r\n        dispatch(updateMessageText(''))\r\n        dispatch(toggleSetStatus(false))\r\n        dispatch(toggleIncStatus(true))\r\n    },[dispatch,startValue])\r\n\r\n\r\n    useEffect(() => {\r\n        if (startValue >= maxValue || startValue < 0 || maxValue < 0 || maxValue <= startValue) {\r\n            dispatch(updateMessageText('error'))\r\n            dispatch(toggleSetStatus(false))\r\n        } else {\r\n            dispatch(toggleSetStatus(true))\r\n        }\r\n    }, [dispatch,startValue, maxValue])\r\n\r\n    useEffect(() => {\r\n        dispatch(toggleIncStatus(false))\r\n        dispatch(toggleResetStatus(false))\r\n        dispatch(updateMessageText('changes'))\r\n    }, [dispatch])\r\n\r\n    const changeSettingsMaxValue = (value: number) => {\r\n        dispatch(updateMaxValue(value))\r\n        dispatch(updateMessageText('changes'))\r\n        dispatch(toggleIncStatus(false))\r\n        dispatch(toggleResetStatus(false))\r\n    }\r\n    const changeSettingsStartValue = (value: number) => {\r\n        dispatch(updateStartValue(value))\r\n        dispatch(updateMessageText('changes'))\r\n        dispatch(toggleIncStatus(false))\r\n        dispatch(toggleResetStatus(false))\r\n    }\r\n\r\n    let inputs = [{\r\n        id: v1(), name: 'max value:', value: maxValue, changeSettingsValue: (value: number) => {\r\n            changeSettingsMaxValue(value)\r\n        }\r\n    },\r\n        {\r\n            id: v1(), name: 'start value:', value: startValue, changeSettingsValue: (value: number) => {\r\n                changeSettingsStartValue(value)\r\n            }\r\n        },\r\n    ]\r\n    return (\r\n        <div className={s.bgr}>\r\n            <FormWithSettings inputs={inputs} message={message} status={isSetActive} onSetHandler={onSetHandler}/>\r\n            <Counter statusInc={isIncActive} statusReset={isResetActive} count={count} maxValue={maxValue}\r\n                     message={message}\r\n                     onResetHandler={onResetHandler} onIncHandler={onIncHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./reducers/counter-reducer\";\r\nimport {loadState, saveState} from \"../utils/local-storage utils\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nconst persistedState = loadState();\r\nexport const store = createStore(\r\n    rootReducer,\r\n    persistedState\r\n);\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n});\r\n\r\n/*\r\n\r\nlet preloadedState\r\nconst persistedTodosString = localStorage.getItem('counter')\r\n\r\nif (persistedTodosString) {\r\n    preloadedState = {\r\n        counter: JSON.parse(persistedTodosString)\r\n    }\r\n}\r\n\r\nexport const store = createStore(rootReducer, preloadedState)*/\r\n","import {AppStateType} from \"../bll/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {App} from './App'\r\nimport './index.css'\r\n\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/></Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"FormWithSettings_counterWrapper__1PRMw\",\"buttons\":\"FormWithSettings_buttons__37Srj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"DisplayWithSettings_display__H08ru\",\"container\":\"DisplayWithSettings_container__1OdGD\",\"input\":\"DisplayWithSettings_input__E3bTQ\",\"inputErr\":\"DisplayWithSettings_inputErr__3W0iL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__30Zg-\",\"maxValue\":\"Display_maxValue__2221t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonActive\":\"Button_buttonActive__3vX_t\",\"buttonNot\":\"Button_buttonNot__2c7Dj\"};"],"sourceRoot":""}