{"version":3,"sources":["App.module.css","DisplayWithSettings/DisplayWithSettings.module.css","Counter1/Counter.module.css","Display/Display.module.css","Display/Display.tsx","Button/Button.tsx","Counter2/Counter2.tsx","DisplayWithSettings/DisplayWithSettings.tsx","Counter1/Counter1.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Display","props","className","count","maxValue","s","tablo","Button","onClick","callback","title","Counter2","counterWrapper","buttons","map","m","name","DisplayWithSettings","inputs","container","fieldWithInput","value","startValue","inputErr","clForInput","up","upClickHandler","down","downClickHandler","Counter1","App","useState","setCount","buttonActive","clForButtonInc","setClForButtonInc","buttonNot","clForButtonSet","setClForButtonSet","clForButtonReset","setClForButtonReset","setStartValue","setMaxValue","input","clForInputMax","setClForInputMax","clForInputStart","setClForInputStart","ButtonDataCont1","id","setToLocalStorage","ButtonDataCont2","Number","allSetsCorrect","setValue","allSetsIncorr","setClForInp","key","localStorage","setItem","getFromLocalStorage","ValueFromLocStAsString","getItem","useEffect","String","bgr","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.001c000f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgr\":\"App_bgr__2H5Le\",\"buttonActive\":\"App_buttonActive__2QeI-\",\"buttonNot\":\"App_buttonNot__1Aju3\",\"input\":\"App_input__E9Xzi\",\"inputErr\":\"App_inputErr__3VZGn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablo\":\"DisplayWithSettings_tablo__2t8Os\",\"container\":\"DisplayWithSettings_container__1OdGD\",\"fieldWithInput\":\"DisplayWithSettings_fieldWithInput__hweXI\",\"up\":\"DisplayWithSettings_up__599x5\",\"down\":\"DisplayWithSettings_down__3k6D9\",\"input\":\"DisplayWithSettings_input__E3bTQ\",\"inputErr\":\"DisplayWithSettings_inputErr__3W0iL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"Counter_counterWrapper__27zdj\",\"buttons\":\"Counter_buttons__2I9-b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablo\":\"Display_tablo__JH0AE\",\"maxValue\":\"Display_maxValue__2221t\"};","import s from \"./Display.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type DisplayPropsType = {\r\n    count: number | undefined|string\r\n    maxValue:number\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n\r\n    return (\r\n        <div className={props.count===props.maxValue||props.count==='Incorrect value!'?s.maxValue:s.tablo}>{props.count}\r\n            </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    title: string\r\n    callback: () => void\r\n    className: string\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    return (\r\n        <button className={props.className} onClick={props.callback}>{props.title}</button>\r\n    )\r\n}","import s from './../Counter1/Counter.module.css'\r\nimport {Display} from \"../Display/Display\";\r\nimport {Button} from \"../Button/Button\";\r\nimport React, {useState} from \"react\";\r\nimport {ButtonDataType, buttonType} from \"../App\";\r\nimport { DisplayWithSettings } from \"../DisplayWithSettings/DisplayWithSettings\";\r\n\r\nexport type CounterPropsType = {\r\n    buttons: ButtonDataType\r\n    count?: number | undefined|string\r\n    maxValue:number\r\n\r\n}\r\n\r\nexport const Counter2 = (props: CounterPropsType) => {\r\n\r\n\r\n    return (\r\n        <div className={s.counterWrapper}>\r\n            <Display count={props.count} maxValue={props.maxValue}/>\r\n            <div className={s.buttons}>\r\n                {props.buttons.map(m =>\r\n                    <Button title={m.name} callback={m.callback} className={m.className}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from \"./DisplayWithSettings.module.css\";\r\nimport {InputsType} from \"../App\";\r\n\r\nexport type DisplayWithSettingsPropsType = {\r\n    inputs: InputsType\r\n    count: number | string\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\nexport const DisplayWithSettings = (props: DisplayWithSettingsPropsType) => {\r\n\r\n    return (\r\n        <div className={s.tablo}>\r\n            {props.inputs.map(m =>\r\n                <div className={s.container}><span>{m.name}</span>\r\n                    <div className={s.fieldWithInput}>\r\n                        <input value={m.value}  className={props.startValue===props.maxValue?s.inputErr:m.clForInput}/>\r\n                        <div className={s.up} onClick={()=>{m.upClickHandler()}}></div>\r\n                        <div className={s.down} onClick={()=>m.downClickHandler()}></div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","import s from \"./Counter.module.css\"\r\nimport {Display} from \"../Display/Display\";\r\nimport {Button} from \"../Button/Button\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {ButtonDataType, buttonType, InputsType} from \"../App\";\r\nimport {DisplayWithSettings} from \"../DisplayWithSettings/DisplayWithSettings\";\r\n\r\nexport type CounterPropsType = {\r\n    buttons: ButtonDataType\r\n    inputs: InputsType\r\n    count: number | string\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\nexport const Counter1 = (props: CounterPropsType) => {\r\n\r\n    return (\r\n        <div className={s.counterWrapper}>\r\n            <DisplayWithSettings inputs={props.inputs} count={props.count}\r\n                                 startValue={props.startValue}\r\n                                 maxValue={props.maxValue}/>\r\n            <div className={s.buttons}>\r\n                {props.buttons.map(m =>\r\n                    <Button title={m.name} callback={m.callback} className={m.className}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport s from './App.module.css'\r\nimport {Counter2} from \"./Counter2/Counter2\";\r\nimport {Counter1} from './Counter1/Counter1';\r\n\r\nexport type buttonType = {\r\n    id: number\r\n    name: string\r\n    callback: () => void\r\n    className: string\r\n\r\n}\r\nexport type inputType = {\r\n    id: number\r\n    name: string\r\n    value: string\r\n    clForInput: string\r\n    upClickHandler: () => void\r\n    downClickHandler: () => void\r\n}\r\nexport type InputsType = Array<inputType>\r\nexport type ButtonDataType = Array<buttonType>\r\n\r\nexport function App() {\r\n    let [count, setCount] = useState<number | string>(0)\r\n    let [clForButtonInc, setClForButtonInc] = useState(s.buttonActive)\r\n    let [clForButtonSet, setClForButtonSet] = useState(s.buttonNot)\r\n    let [clForButtonReset, setClForButtonReset] = useState(s.buttonNot)\r\n    let [startValue, setStartValue] = useState('0')\r\n    let [maxValue, setMaxValue] = useState('5')\r\n    let [clForInputMax, setClForInputMax] = useState(s.input);\r\n    let [clForInputStart, setClForInputStart] = useState(s.input);\r\n\r\n    const onIncHandler = () => {\r\n        if (count < maxValue) {\r\n            count = Number(count) + 1\r\n            setCount(count)\r\n        }\r\n        if (count == maxValue) {\r\n            setClForButtonInc(s.buttonNot)\r\n        }\r\n        if (count > 0) {\r\n            setClForButtonReset(s.buttonActive)\r\n        }\r\n    }\r\n    const onResetHandler = () => {\r\n        if (count > 0) {\r\n            setCount(0)\r\n            setClForButtonReset(s.buttonNot)\r\n            setClForButtonInc(s.buttonActive)\r\n        }\r\n    }\r\n\r\n    const onSetHandler = () => {\r\n        if (clForButtonSet !== s.buttonNot) {\r\n            setCount(startValue)\r\n            setClForButtonSet(s.buttonNot)\r\n            setToLocalStorage('maxValue',maxValue)\r\n            setToLocalStorage('startValue',startValue)\r\n        }\r\n    }\r\n\r\n    let ButtonDataCont1 = [\r\n        {\r\n            id: 1, name: 'set', callback: () => {\r\n                onSetHandler()\r\n            }, className: clForButtonSet\r\n        }\r\n    ]\r\n    let ButtonDataCont2 = [\r\n        {\r\n            id: 1, name: 'inc', callback: () => {\r\n                onIncHandler()\r\n            }, className: clForButtonInc\r\n        },\r\n        {\r\n            id: 2, name: 'reset', callback: () => {\r\n                onResetHandler()\r\n            }, className: clForButtonReset\r\n        }\r\n    ]\r\n    const allSetsCorrect = (value: string, setValue: (value: string) => void) => {\r\n        setValue(value)\r\n        setClForButtonSet(s.buttonActive)\r\n        setClForInputStart(s.input)\r\n        setClForInputMax(s.input)\r\n        setCount('enter value and press set')\r\n    }\r\n    const allSetsIncorr = (value: string, setValue: (value: string) => void, setClForInp: (clForInp: string) => void) => {\r\n        setValue(value)\r\n        setClForButtonSet(s.buttonNot)\r\n        setClForInp(s.inputErr)\r\n        setCount('Incorrect value!')\r\n    }\r\n    const setToLocalStorage = (key: string, value: string) => {\r\n        localStorage.setItem(key, value)\r\n    }\r\n    const getFromLocalStorage = (key: string, setValue: (value: string) => void) => {\r\n        let ValueFromLocStAsString = localStorage.getItem(key)\r\n\r\n        if (ValueFromLocStAsString) {\r\n            setValue(ValueFromLocStAsString)\r\n            if(key==='startValue'){\r\n                setCount(ValueFromLocStAsString)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFromLocalStorage('maxValue',setMaxValue)\r\n    }, [])\r\n    useEffect(() => {\r\n        getFromLocalStorage('startValue',setStartValue)\r\n    }, [])\r\n\r\n    /*   const upClickHandler = (value: string, setValue: (value: string) => void, setClForInp: (clForInp: string) => void) => {\r\n\r\n           value=String(Number(value)+1)\r\n           console.log(value)\r\n\r\n\r\n           console.log(Number(value) > Number(startValue))\r\n               if (Number(value) > -1||Number(value) > Number(startValue)) {\r\n                   setValue(value)\r\n                   setClForButtonReset(s.buttonActive)\r\n                   setClForInputStart(s.input)\r\n                   setClForInputMax(s.input)\r\n                   setCount('enter value and press set')\r\n\r\n                   /!*allSetsCorrect(value, setValue)*!/\r\n               } else {\r\n                   console.log(value)\r\n                   console.log(maxValue)\r\n                   console.log(startValue)\r\n                   console.log(Number(maxValue) > Number(startValue))\r\n                   allSetsIncorr(value, setValue, setClForInp)\r\n               }\r\n       }*/\r\n\r\n    const upClickHandlerMax = () => {\r\n        maxValue = String(Number(maxValue) + 1)\r\n        if (Number(maxValue) > -1 && Number(maxValue) > Number(startValue)) {\r\n            allSetsCorrect(maxValue, setMaxValue)\r\n        } else {\r\n            allSetsIncorr(maxValue, setMaxValue, setClForInputMax)\r\n        }\r\n    }\r\n    const upClickHandlerStart = () => {\r\n        startValue = String(Number(startValue) + 1)\r\n        if (Number(startValue) > -1 && Number(startValue) < Number(maxValue)) {\r\n            allSetsCorrect(startValue, setStartValue)\r\n        } else {\r\n            allSetsIncorr(startValue, setStartValue, setClForInputStart)\r\n        }\r\n    }\r\n    /* const downClickHandler = (value: string, setValue: (value: string) => void, setClForInp: (clForInp: string) => void) => {\r\n         /!*if (value === maxValue) {\r\n             value = String(Number(value) - 1)\r\n             maxValue = value\r\n             if (Number(value) > -1 && Number(maxValue) > Number(startValue)) {\r\n\r\n                 allSetsCorrect(value, setValue)\r\n             } else {\r\n\r\n                 allSetsIncorr(value, setValue, setClForInp)\r\n             }\r\n\r\n         }\r\n         if (value === startValue) {\r\n             value = String(Number(value) - 1)\r\n             startValue = value\r\n             if (Number(value) > -1 && Number(maxValue) > Number(startValue)) {\r\n                 console.log(Number(maxValue) > Number(startValue));\r\n                 allSetsCorrect(value, setValue)\r\n             } else {\r\n                 console.log(Number(maxValue) > Number(startValue))\r\n                 allSetsIncorr(value, setValue, setClForInp)\r\n             }\r\n\r\n         }*!/\r\n     }*/\r\n\r\n    const downClickHandlerMax = () => {\r\n        maxValue = String(Number(maxValue) - 1)\r\n        if (Number(maxValue) > -1 && Number(maxValue) > Number(startValue)) {\r\n            allSetsCorrect(maxValue, setMaxValue)\r\n        } else {\r\n            allSetsIncorr(maxValue, setMaxValue, setClForInputMax)\r\n        }\r\n    }\r\n    const downClickHandlerStart = () => {\r\n        startValue = String(Number(startValue) - 1)\r\n        if (Number(startValue) > -1 && Number(startValue) < Number(maxValue)) {\r\n            allSetsCorrect(startValue, setStartValue)\r\n        } else {\r\n            allSetsIncorr(startValue, setStartValue, setClForInputStart)\r\n        }\r\n    }\r\n\r\n    let inputs = [{\r\n        id: 1,\r\n        name: 'max value:',\r\n        value: maxValue,\r\n        clForInput: clForInputMax,\r\n        upClickHandler: () => {\r\n            upClickHandlerMax()\r\n        },\r\n        downClickHandler: () => {\r\n            downClickHandlerMax()\r\n        }\r\n    },\r\n        {\r\n            id: 2,\r\n            name: 'start value:',\r\n            value: startValue,\r\n            clForInput: clForInputStart,\r\n            upClickHandler: () => {\r\n                upClickHandlerStart()\r\n            },\r\n            downClickHandler: () => {\r\n                downClickHandlerStart()\r\n            }\r\n        },\r\n    ]\r\n    return (\r\n        <div className={s.bgr}>\r\n            <Counter1 buttons={ButtonDataCont1} inputs={inputs} count={count}\r\n                      maxValue={Number(maxValue)}\r\n                      startValue={Number(startValue)}/>\r\n            <Counter2 buttons={ButtonDataCont2} count={count} maxValue={Number(maxValue)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { App } from './App'\r\nimport './index.css'\r\n\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}